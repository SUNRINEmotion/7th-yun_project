# -*- coding: utf-8 -*-
"""방학프젝.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fe8OFXC-Yv68thZc0oCK95nkSFB6rjqv
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2
import os
from PIL import Image
import numpy as np
def resize_image(image, target_size):
    resized_image = image.resize(target_size)
    return resized_image
# 이미지 데이터를 저장할 리스트
images = []
# 이미지 레이블을 저장할 리스트
labels = []

# positive_train 폴더 내 이미지 불러오기
positive_train_path = "/content/drive/MyDrive/방학프젝/1.Training/원천데이터/작물 질병/질병"
positive_train_images = os.listdir(positive_train_path)
for image_name in positive_train_images:
    image_path = os.path.join(positive_train_path, image_name)
    image = Image.open(image_path)  # 이미지를 PIL로 열기
    image = resize_image(image, (64, 64))
    image = np.array(image)  # PIL 이미지를 numpy 배열로 변환
    images.append(image)
    labels.append(1)  # positive 레이블은 1로 표시

positive_test_path = "/content/drive/MyDrive/방학프젝/2.Validation/원천데이터/test/질병"
positive_test_images = os.listdir(positive_test_path)
for image_name in positive_train_images:
    image_path = os.path.join(positive_train_path, image_name)
    image = Image.open(image_path)  # 이미지를 PIL로 열기
    image = resize_image(image, (64, 64))
    image = np.array(image)  # PIL 이미지를 numpy 배열로 변환
    images.append(image)
    labels.append(1)  # positive 레이블은 1로 표시

# negative_train 폴더 내 이미지 불러오기
negative_train_path = "/content/drive/MyDrive/방학프젝/2.Validation/원천데이터/test/정상"
negative_train_images = os.listdir(negative_train_path)
for image_name in negative_train_images:
    image_path = os.path.join(negative_train_path, image_name)
    image = Image.open(image_path)  # 이미지를 PIL로 열기
    image = resize_image(image, (64, 64))
    image = np.array(image)  # PIL 이미지를 numpy 배열로 변환

    images.append(image)
    labels.append(0)  # negative 레이블은 0으로 표시

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from sklearn.model_selection import train_test_split
# 이미지 데이터를 numpy 배열로 변환
X = np.array(images)
y = np.array(labels)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25)) # Dropout added

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25)) # Dropout added

model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5)) # Dropout added

model.add(Dense(1, activation='sigmoid'))

from keras.callbacks import EarlyStopping

# 조기 종료 객체를 생성합니다.
early_stop = EarlyStopping(monitor='val_loss', patience=10)


model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# 모델을 학습시킵니다.
history = model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), callbacks=[early_stop])

# 테스트 결과를 출력합니다.
score=model.evaluate(X_test, y_test)
print('Test accuracy:', score[1])

print(f"Train accuracy: {history.history['accuracy'][-1]}")
print(f"Validation accuracy: {history.history['val_accuracy'][-1]}")

from PIL import Image
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input
import matplotlib.pyplot as plt



def predict_and_show_image(model, img_path):
    img = Image.open(img_path).convert('RGB')
    img_resized = img.resize((64, 64))

    x = np.array(img_resized)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    preds = model.predict(x)
    result = "Positive" if preds[0] > 0.5 else "Negative"

    plt.imshow(img)
    plt.title(f"expected to be {result}")
    plt.show()

# 예시
img_path = '/content/drive/MyDrive/방학프젝/test/img_246093_1.jpg'  # 여기에

predict_and_show_image(model, img_path)

img_path = '/content/drive/MyDrive/방학프젝/test/art_16523100664533_fc0774.jpg'

predict_and_show_image(model, img_path)



